<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
    version="2.4">

  <display-name>Web Application for gweb</display-name>

  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>gweb</param-value>
  </context-param>

  <!--
    Tell spring which context files we want to use, if none are specified then use the 
    applicationContext.xml
   -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      classpath:/context-domain-aop.xml, classpath:/context-domain-dao.xml,
      classpath:/context-domain-datasource.xml, classpath:/context-domain-service.xml,
      classpath:/context-domain-sessionfactory.xml, classpath:/context-gweb-servlet.xml
    </param-value>
  </context-param>

  <!-- workaround
   <context-param>
 <param-name>com.sun.faces.expressionFactory</param-name>
 <param-value>org.apache.el.ExpressionFactoryImpl</param-value>
 </context-param -->

  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>/WEB-INF/classes/log4j.properties</param-value>
  </context-param>

  <context-param>
    <description>
      Comma separated list of URIs of (additional) faces config files.
      (e.g. /WEB-INF/my-config.xml)
      See JSF 1.0 PRD2, 10.3.2
    </description>
    <param-name>javax.faces.CONFIG_FILES</param-name>
    <param-value>
      /WEB-INF/faces-config.xml
    </param-value>
  </context-param>

  <context-param>
    <description>
      State saving method: "client" or "server" (= default)
      See JSF Specification 2.5.2
    </description>
    <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
    <param-value>client</param-value>
  </context-param>

  <context-param>
    <description>
      This parameter tells MyFaces if javascript code should be allowed in the
      rendered HTML output.
      If javascript is allowed, command_link anchors will have javascript code
      that submits the corresponding form.
      If javascript is not allowed, the state saving info and nested parameters
      will be added as url parameters.
      Default: "true"
    </description>
    <param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
    <param-value>false</param-value>
  </context-param>

  <context-param>
    <description>
      If true, rendered HTML code will be formatted, so that it is "human readable".
      i.e. additional line separators and whitespace will be written, that do not
      influence the HTML code.
      Default: "true"
    </description>
    <param-name>org.apache.myfaces.PRETTY_HTML</param-name>
    <param-value>true</param-value>
  </context-param>

  <context-param>
    <param-name>org.apache.myfaces.DETECT_JAVASCRIPT</param-name>
    <param-value>false</param-value>
  </context-param>

  <context-param>
    <description>
      If true, a javascript function will be rendered that is able to restore the
      former vertical scroll on every request. Convenient feature if you have pages
      with long lists and you do not want the browser page to always jump to the top
      if you trigger a link or button action that stays on the same page.
      Default: "false"
    </description>
    <param-name>org.apache.myfaces.AUTO_SCROLL</param-name>
    <param-value>true</param-value>
  </context-param>


  <!-- Listener, that does all the startup work (configuration, init). -->
  <listener>
    <listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
  </listener>
  

  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>


    <!-- Faces Servlet -->
  <servlet>
    <servlet-name>Faces Servlet</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>


  <!--servlet>
    <servlet-name>Spring Servlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/classes/context-gweb-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>


  <servlet-mapping>
    <servlet-name>Spring Servlet</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>


  <servlet>
    <servlet-name>gweb</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/classes/context-gweb-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet -->



  <servlet-mapping>
    <servlet-name>Faces Servlet</servlet-name>
    <url-pattern>*.faces</url-pattern>
  </servlet-mapping>


  <!-- servlet-mapping>
    <servlet-name>gweb</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping -->


  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

</web-app>
