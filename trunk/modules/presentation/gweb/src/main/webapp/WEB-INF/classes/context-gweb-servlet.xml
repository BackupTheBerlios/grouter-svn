<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
  http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"
       default-autowire="byName">

    <!--
      Maps incoming HTTP requests to names of beans
    -->
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
        <property name="interceptors">
            <list>
                <ref bean="localeChangeInterceptor"/>
            </list>
        </property>
    </bean>


    <!--
       E.g. http://www.myapp.com/home?lang=en_GB will change the  locale
    -->
    <bean id="localeChangeInterceptor"
          class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
        <property name="paramName">
            <value>lang</value>
        </property>
    </bean>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/>


    <!--
    Localization Bean.
    It’s important to name the bean messageSource because that’s the name Spring will use to look for a
    message source. As for the location of the message properties file, this is determined by the
    basename property. Here the base name is set to messages. This means that, by
    default, externalized messages will be retrieved from a file called messages.prop-
    erties in the classpath (under /WEB-INF/classes/mes-
    sages.properties)
    -->
    <bean id="messageSource" class=
            "org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages"/>
    </bean>


    <!--
   SimpleMappingExceptionResolver comes to the rescue when an exception is
   thrown from a controller. Use the following <bean> definition to configure Sim-
   pleMappingExceptionResolver to gracefully handle any java.lang.Exceptions
   thrown from Spring MVC controllers:
    -->
    <bean id="exceptionResolver" class="org.grouter.presentation.util.ApplicationMappingExceptionResolver">
        <property name="order" value="1"/>
        <!--property name="mappedHandlers">
           <set>
               <ref bean="/message/list.do"/>
               <ref bean="/message/search.do"/>
           </set>
       </property -->
        <property name="exceptionMappings">
            <props>
                <!-- The error page under /pages/error folder -->
                <prop key="java.lang.Exception">error/error</prop>
                <prop key="Exception">error/error</prop>
                <prop key="org.hibernate.exception.ConstraintViolationException">error/databaseerror</prop>
            </props>
        </property>
    </bean>

    <!-- Router GWT service controller wrapping calls from client side to server side controller -->
    <bean id="GWTRemoteService" class="org.grouter.presentation.gwt.server.GWTRemoteServiceImpl">
        <property name="routerService" ref="routerService" />
    </bean>
    <bean name="/router.rpc" class="org.grouter.presentation.gwt.server.GWTRemoteServiceImpl"/>

    <!-- Spring controllers -->
    <bean name="/message/list.do" class="org.grouter.presentation.controller.message.MessageListController"/>
    <bean name="/message/search.do" class="org.grouter.presentation.controller.message.MessageSearchController" >
        <property name="routerService" ref="routerService"/>
    </bean>
    <bean name="/node/list.do" class="org.grouter.presentation.controller.node.NodeListController"/>
    <bean name="/node/edit.do" class="org.grouter.presentation.controller.node.NodeEditController"/>
    <bean name="/node/search.do" class="org.grouter.presentation.controller.node.NodeSearchController"/>
    <bean name="/user" class="org.grouter.presentation.controller.user.UserListController"/>
    <bean name="/user/list.do" class="org.grouter.presentation.controller.user.UserListController"/>
    <bean name="/user/edit.do" class="org.grouter.presentation.controller.user.UserEditController"/>
    <bean name="/user/lwedit.do" class="org.grouter.presentation.controller.user.UserEditController"/>
    <bean name="/user/search.do" class="org.grouter.presentation.controller.user.UserSearchController"/>
    <!-- bean name="/user/listtest.do" class="org.grouter.presentation.controller.user.UserListController"/ -->
    <bean name="/user/delete.do" class="org.grouter.presentation.controller.user.UserDeleteController"/>

    <bean name="/router/list.do" class="org.grouter.presentation.controller.router.RouterListController"/>
    <bean name="/router/search.do" class="org.grouter.presentation.controller.router.RouterSearchController"/>

    <bean name="/job/edit.do" class="org.grouter.presentation.controller.job.JobEditController"/>
    <bean name="/job/list.do" class="org.grouter.presentation.controller.job.JobListController"/>
    <bean name="/job/delete.do" class="org.grouter.presentation.controller.job.JobDeleteController"/>
    <bean name="/job/lwedit.do" class="org.grouter.presentation.controller.job.JobEditController"/>


    <bean name="/security/**" class="org.grouter.presentation.controller.security.SecurityController">
        <property name="login" value="security/login"/>
        <!-- /gweb/seucurity/login.do  -->
        <property name="loggedOut" value="security/logedout"/>
        <!-- /gweb/seucurity/logedout.do  -->
        <property name="loginDenied" value="security/logindenied"/>
    </bean>

    <!--
    Config for JSP/JSTL
    A view resolver’s job  is to take the view name returned in the ModelAndView and map it to a view.
    We need a view resolver to resolve the logical view name returned in the ModelAndView to a JSP file
    that renders the homepage.
    -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/pages/"/>
        <property name="suffix" value=".jsp"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    </bean>


    <!-- DWR -->
    <!-- bean name="/**/*" class="org.springframework.web.servlet.mvc.ServletWrappingController">
        <property name="servletClass" value="org.directwebremoting.servlet.DwrServlet"/>
        <property name="initParameters">
            <props>
                <prop key="debug">true</prop>
                <prop key="pollAndCometEnabled">true</prop>
            </props>
        </property>
    </bean -->


    <!--bean id="dwrController" class="org.springframework.web.servlet.mvc.ServletWrappingController">
     <property name="servletClass">
       <value>uk.ltd.getahead.dwr.DWRServlet</value>
     </property>
     <property name="initParameters">
       <props>
         <prop key="debug">true</prop>
       </props>
     </property>
   </bean>

   <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
     <property name="mappings">
       <props>
         <prop key="/**/*">dwrController</prop>
       </props>
     </property>
   </bean -->


</beans>