/* Generated by Together */

package design;

import java.sql.*;
import java.util.logging.*;

/** 
* Execute a local, non-distributed transaction versus a single database,  
* using a single connection.
*
* <P>Do not use this class in the context of a <code>UserTransaction</code>.
*
* <P>This abstract base class implements the template method design pattern.
*
* @used.By {@link MyUserDAO}, {@link MyUserTheoriesDAO}.
* @author <a href="http://www.javapractices.com/">javapractices.com</a>
*/
abstract class AbstractLocalTx implements Tx {
  
  /**
  * Calls the abstract method {@link #executeMultipleSqls}, as part of its template.
  */
  public final int executeTx() throws DAOException {
    int result = 0;
    fLogger.fine("Editing within a local transaction.");
    fConnection = DbConnection.get();
    try {
      startTx();
      result = executeMultipleSqls(fConnection);
      endTx();
    }
    catch(Throwable ex){
      rollbackTx();
      throw new DAOException("Rolled back transaction: " + ex, ex);
    }
    finally {
      DbUtil.logWarnings(fConnection);
      DbUtil.close(fConnection);
    }
    fLogger.fine("Total number of edited records: " + result);
    return result;
  }

  /**
  * Execute multiple SQL operations in a single local transaction.
  *
  * <P><em>Design Note</em>: allowing <code>SQLException</code> in the 
  * <code>throws</code> clause simplifies the implementor significantly, since no  
  * <code>try-catch</code> blocks are needed. Thus, the caller has simple,
  * "straight-line" code.
  *
  * @param aConnection must be used by all SQL statements participating in 
  * this transaction
  * @return number of records edited by this operation.
  */
  abstract int executeMultipleSqls(Connection aConnection) throws SQLException, DAOException;
  
  // PRIVATE //
  
  /**
  * The connection through which all SQL statements attached to this 
  * transaction are executed.
  */
  private Connection fConnection;
  private static final boolean fOFF = false;
  private static final boolean fON = true;
  
  private static final Logger fLogger = 
    Logger.getLogger(AbstractLocalTx.class.getPackage().getName())
  ;  

  private void startTx() throws SQLException {
    fConnection.setAutoCommit(fOFF);
  }
  
  private void endTx() throws SQLException {
    fConnection.commit();
    fConnection.setAutoCommit(fON);
  }
  
  private void rollbackTx() throws DAOException {
    fLogger.severe("ROLLING BACK TRANSACTION.");
    try {
      fConnection.rollback();
    }
    catch(SQLException ex){
      throw new DAOException("Cannot rollback transaction.", ex);
    }
  }
}
