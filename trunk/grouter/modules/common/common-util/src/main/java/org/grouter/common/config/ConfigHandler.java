/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.grouter.common.config;

import java.util.ArrayList;
import java.util.Iterator;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import org.apache.log4j.Logger;
import org.apache.xmlbeans.XmlOptions;
import org.apache.xmlbeans.XmlObject;
import org.apache.xmlbeans.XmlException;
import org.grouter.config.GrouterDocument;

/**
 * Validating XML against schema using features of the XMLBeans API.
 *
 * - Validating after changes by using the XmlObject.validate method.
 * This method is exposed by types generated by compiling schema. The
 * validate method validates instances against all aspects of schema.
 * Also, with this method you can specify a Collection instance to
 * capture errors that occur during validation.
 *
 * @author Georges Polyzois
 *
 */
public class ConfigHandler
{
    //ResourceBundle resourceBundle = ResourceBundle.getBundle("config");
    private static Logger logger = Logger.getLogger(ConfigHandler.class);
    private XmlOptions xmlOptions;
    private ArrayList validationErrors = new ArrayList();

    //root handle to config
    private GrouterDocument gRouterConfigDocument;

    /**
     * Constructor.
     * @param absoluteFilePath
     * @param xmlOptions
     */
    public ConfigHandler(String absoluteFilePath, XmlOptions xmlOptions)
    {
        if (absoluteFilePath==null)
        {
            throw new IllegalArgumentException("File path to config file can not be null!");
        }

        File test = new File(absoluteFilePath);
        if (!test.isFile())
        {
            throw new IllegalArgumentException("File path to config file points to folder!");    
        }
        this.xmlOptions = xmlOptions;
        this.gRouterConfigDocument =  (GrouterDocument) parseXml(absoluteFilePath, xmlOptions);
    }

    /**
     * Constructor.
     * @param inputStream
     * @param xmlOptions
     */
    public ConfigHandler(InputStream inputStream, XmlOptions xmlOptions)
    {
        if (inputStream==null)
        {
            throw new IllegalArgumentException("InputStream can not be null!");
        }
        this.xmlOptions = xmlOptions;
        this.gRouterConfigDocument =  (GrouterDocument) parseXml(inputStream, xmlOptions);
    }

    /**
     * Receives the collection containing errors found during
     * validation and print the errors to the console.
     *
     * @param validationErrors The validation errors array which will be populated.
     */
    public void printErrors(ArrayList validationErrors)
    {
        Iterator iter = validationErrors.iterator();
        while (iter.hasNext())
        {
            logger.warn("Validation errors in xml : " + iter.next() + "\n");
        }
    }


    /**
     * <p>Creates a Xmlobject from the XML inputstream, then parses the stream's contents
     * into a type generated from schema.</p>
     *
     * @param inStream A stream to XML based on the schema in config.xsd.
     * @return An instance of a generated schema type that contains the parsed XML.
     */
    private XmlObject parseXml(InputStream inStream, XmlOptions validationOptions)
    {
        XmlObject xml = null;
        try
        {
            xml = XmlObject.Factory.parse(inStream, validationOptions);
        } catch (XmlException e)
        {
            logger.error(e , e);
        } catch (IOException e)
        {
            logger.error(e, e);
        }
        return xml;
    }

    /**
     * <p>Creates a File from the XML path , then parses the file's contents
     * into a type generated from schema.</p>
     *
     * @param xmlFilePath A path to XML based on the schema in config.xsd.
     * @return An instance of a generated schema type that contains the parsed XML.
     */
    private XmlObject parseXml(String xmlFilePath, XmlOptions validationOptions)
    {
        File xmlFile = new File(xmlFilePath);
        XmlObject xml = null;
        try
        {
            xml = XmlObject.Factory.parse(xmlFile, validationOptions);
        } catch (XmlException e)
        {
            logger.error(e, e);
        } catch (IOException e)
        {
            logger.error(e, e);
        }
        return xml;
    }

    /**
     * Get the config.
     * @return An GRouterConfigDocument from parsed config.xsd
     */
    public GrouterDocument getGrouterConfigDocument()
    {
        return gRouterConfigDocument;
    }

}
