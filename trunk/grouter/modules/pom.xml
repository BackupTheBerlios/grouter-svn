<!--
| If you use a good editor like Idea Intellij and specify the xsi:schemalocations
| the editor should be able to pick upp the schema and use it for validation
| and auto completion on xml elements in your pom.xml
| The xmlns attribute specifies the dfault namespace for this xml document.
| Many (all?) eleemnts can be referenced using their xml element name. Some cruicial
| ones you should now about include:
| ${project.version}   - the version of the artifact produced by the project
| ${basedir}           - the projects root location, from which you can specify the src
                         directory relatively to the projects (pom.xml) home location
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <!--
    | This is the version for the POM model Maven 2 uses, it is something
    | you will probably never change (unless Maven decides to upgrade
    | the version number - but then you probably have to look through
    | the whole pom.xml file). It has a corresponding schema on
    | http://maven.apache.org/maven-v4_0_0.xsd
    -->
    <modelVersion>4.0.0</modelVersion>
    <!--
    | The groupId element is a unique identifier of the organization
    | or group that created the project. This value is used to group
    | all artifacts (jars, wars, ears, poms etc) for a project into
    | directories. E.g. in this example
    | GroupId will generate a folder structure of $M2_REPO/org/grouter
    | on a mvn install. You will notice that many artifacts at ibiblio
    | do not use this type of structure (org.something)- instead they
    | place the groupId(folder) in the root structure. Maven encourages
    | you to use your reverse www address as a starting point for
    | this element.
    -->
    <groupId>org.grouter</groupId>
    <!--
    | This is the name of the artifact which will be produced and put
    | under the groupId structure discussed above. It is a unique
    | identifier which identifies this artifact under the specified
    | groupId and will produce something like e.g.
    | grouter-1.0-SNAPSHOT.jar or on a release grouter-1.0.0.jar
    -->
    <artifactId>platform</artifactId>
    <!--
    | The packaging element tells you what type of artifact will be
    | produced. There are several type of artifacts supported, like
    | war and ear type artifacts.
    -->
    <packaging>pom</packaging>
    <!--
    | The version elelent is appended to the artifactId. During development
    | you should/could use a SNAPSHOT dependency.
    | What are SNAPSHOT dependencies and how could they be used? Say you have
    | a CI server watching cvs and doing rebuilds of your project artifacts
    | and thereafter an install of the artifacts in the remote repostiory
    | (remote for the developers, local for the CI server). If the project team
    | uses binary SNAPSHOT dependencies they will on a daily basis get new
    | binaries from the remote repository to their local repository. This means
    | they will be on the bleeding edge of development - a matter of choice.
    -->
    <version>1.0-SNAPSHOT</version>

    <!--
    | Description will go to generated documentation reports.
    -->
    <description>GRouter is aimed to provide routing mechanism for messages
        with destinations including jms, ejb, file, email etc.</description>

    <!--
    | A name used for documentation and in the command console showing the
    | dependency order of a multi project build.
    -->
    <name>${groupId} :: ${artifactId}</name>

    <!--
    | Url used for documentation reports.
    -->
    <url>http://grouter.berlios.de/</url>

    <!--
    | This is where we put all child modules to be built. In Maven 1
    | you just pointed to a root directory from which Maven then 
    | would start a traversal for project.xml file - this is
    | no longer the case. Instead we explicitly point to all child modules
    | which makes the build process a lot more faster.
    -->
    <modules>
        <module>../modules/common</module>
        <!--module>../modules/domain</module-->
        <!--module>../modules/router/grouter</module>
       <module>../modules/router/grouterconfig</module -->
        <!--module>../modules/webservice</module-->
        <!--module>../modules/router</module-->
    </modules>

    <!--
    | The developers element describe the committers to a project. The information
    | is used in the reporting section in the documentation (for project-team
    | reprots).
    -->
    <developers>
        <developer>
            <id>gepo01</id>
            <name>Georges Polyzois</name>
            <email>gepo01 at yahoo dot not com</email>
            <url/>
            <organization/>
            <organizationUrl/>
            <roles/>
            <timezone/>
            <properties/>
        </developer>
    </developers>

    <!--
    | If you have any internal repository/s you state them here. The order
    | is important - first stated will be used first.
    | If you are working in an environment were no Internet access is allowed
    | then this section lets you point to an internal corporate repository -
    | a proxy. 
    -->
    <repositories>
        <repository>
            <id>maven2</id>
            <name>Danish Maven2 repository</name>
            <url>http://mirrors.sunsite.dk/maven2</url>
        </repository>
        <!--
        | This will enable snaphost versions of plugins from Codehaus.
        | - see also pluginRepositories element .
        -->
        <repository>
            <id>Maven Snapshots</id>
            <url>http://snapshots.maven.codehaus.org/maven2/</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <releases>
                <enabled>true</enabled>
            </releases>
        </repository>
        <repository>
            <id>Maven Sanpshots Apache</id>
            <name>Maven Sanpshots</name>
            <layout>default</layout>
            <url>http://cvs.apache.org/maven-snapshot-repository/</url>
            <snapshots>
                <checksumPolicy>ignore</checksumPolicy>
                <updatePolicy>always</updatePolicy>
                <enabled>true</enabled>
            </snapshots>
        </repository>


    </repositories>

    <!--
    | If you want to use an internal repository for plugin management then this
    | element should be used. E.g. if you have developed a very corporate
    | specific plugin which you can not put on a public Maven repository.
    | A use case could be if you want to use the castor plugin - but that
    | plugin has dependency on castor 0.9.7 and you are forced to use castor 0.9.9.1
    -->
    <pluginRepositories>
        <pluginRepository>
            <id>internalplugins</id>
            <name>Internal plugins or modified plugins</name>
            <url>http://internals.corporate.server/mavenrepository</url>
        </pluginRepository>
        <!--
        | This will enable snaphost versions of plugins from Codehaus
        |  - see also repostiory element .
        -->
        <pluginRepository>
            <id>Maven Snapshots</id>
            <url>http://snapshots.maven.codehaus.org/maven2/</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <releases>
                <enabled>false</enabled>
            </releases>
        </pluginRepository>
        <!--
        |
        |
        -->
        <pluginRepository>
            <id>snapshots</id>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>daily</updatePolicy>
            </snapshots>
            <name>Maven Central Plugins Development Repository</name>
            <url>http://snapshots.maven.codehaus.org/maven2</url>
            <releases>
                <updatePolicy>daily</updatePolicy>
            </releases>
        </pluginRepository>
    </pluginRepositories>

    <!--
    | Put all global dependencies here instead of spreading them out in
    | different child modules - an oo way of handling dependencies.
    | The difference of putting a dependency in this section compare to the
    | dependecy managment section is that dependencies in this section get
    | inherited by all child poms - this might be desired for some
    | 3rd party dependencies like log4j. Putting the dependency in the
    | dependencyManagement section forces the owner of a child pom to explicitly
    | state a dependency - however with no version since that should
    | always be handled in the root pom.
    -->
    <dependencies>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.7.0</version>
        </dependency>
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.1</version>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.1</version>
        </dependency>
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.0.4</version>
        </dependency>
        <dependency>
            <groupId>commons-discovery</groupId>
            <artifactId>commons-discovery</artifactId>
            <version>0.2</version>
        </dependency>
        <dependency>
            <groupId>jmock</groupId>
            <artifactId>jmock</artifactId>
            <version>1.0.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.8</version>
        </dependency>
        <dependency>
            <groupId>logkit</groupId>
            <artifactId>logkit</artifactId>
            <version>2.0</version>
        </dependency>
        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <version>2.0</version>
            <scope>test</scope>
        </dependency>
        <!--dependency>
            <groupId>dom4j</groupId>
            <artifactId>dom4j</artifactId>
            <version>1.6.1</version>
        </dependency-->

    </dependencies>


    <!--
    | Dependencies that should be inherited by some of the child poms
    | of this parent, but not all. Child poms need not enter version
    | since it is inherited from the root/parent pom.
    -->
    <dependencyManagement>
        <dependencies>
            <!--
            | Dependencies to J2EE spec - using geronimo generated
            | artifacts to get transparent builds without installing
            | the J2EE kit or pointing to your J2EE app jars.
            -->
            <dependency>
                <groupId>geronimo-spec</groupId>
                <artifactId>geronimo-spec-jms</artifactId>
                <version>1.1-rc4</version>
            </dependency>
            <dependency>
                <groupId>geronimo-spec</groupId>
                <artifactId>geronimo-spec-ejb</artifactId>
                <version>2.1-rc4</version>
            </dependency>
            <dependency>
                <groupId>geronimo-spec</groupId>
                <artifactId>geronimo-spec-j2ee-connector</artifactId>
                <version>1.5-rc4</version>
            </dependency>
            <dependency>
                <groupId>geronimo-spec</groupId>
                <artifactId>geronimo-spec-activation</artifactId>
                <version>1.0.2-rc4</version>
            </dependency>
            <dependency>
                <groupId>geronimo-spec</groupId>
                <artifactId>geronimo-spec-jta</artifactId>
                <version>1.0.1B-rc4</version>
            </dependency>
            <dependency>
                <groupId>geronimo-spec</groupId>
                <artifactId>geronimo-spec-jta</artifactId>
                <version>1.0.1B-rc4</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate</artifactId>
                <version>3.1.2</version>
                <!--
                | Excluding jars is a powerful feature. Here I know I
                | will not use swarmcache, so I do not need downloading
                | that dependency.
                -->
                <exclusions>
                    <exclusion>
                        <groupId>ant</groupId>
                        <artifactId>ant</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>odmg</groupId>
                        <artifactId>odmg</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>c3p0</groupId>
                        <artifactId>c3p0</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>proxool</groupId>
                        <artifactId>proxool</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>opensymphony</groupId>
                        <artifactId>oscache</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>swarmcache</groupId>
                        <artifactId>swarmcache</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>jboss</groupId>
                        <artifactId>jboss-cache</artifactId>
                    </exclusion>
                    <!--exclusion>
                        <groupId>javax.security</groupId>
                        <artifactId>jacc</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>javax.transaction</groupId>
                        <artifactId>jta</artifactId>
                    </exclusion-->
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring</artifactId>
                <version>1.2.6</version>
                <scope>compile</scope>
                <exclusions>
                    <exclusion>
                        <groupId>javax.activation</groupId>
                        <artifactId>jta</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>javax.resource</groupId>
                        <artifactId>connector</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>hsqldb</groupId>
                <artifactId>hsqldb</artifactId>
                <version>1.8.0.1</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--
    | Used by the reporting section for the report - issue-tracking.
    -->
    <issueManagement>
        <system>whoknows</system>
        <url>http://localhost</url>
    </issueManagement>

    <!--
    | Used by the reporting section for the report - cim. 
    -->
    <ciManagement>
        <system>cruisecontrol</system>
        <url>http://localhost:9999/cruisecontrol</url>
    </ciManagement>

    <!--
    | Used by the reporting section for the report - scm.
    | 
    | Also usd by the release plugin for communication with the scm :
    | mvn release:prepare -DdryRun=true     //runs a test prepare phase without checking in
    | mvn release:perform -Dgoal="deploy"   //builds artifacts with release version and deploys them .
    | Tip: watchout for the release.properties - 
    | use mvn release:clean release:perform -DdryRun=true until you get it working.
    -->
    <scm>
        <connection>https://geopol@svn.berlios.de/svnroot/repos/grouter/trunk</connection>
        <developerConnection>https://geopol@svn.berlios.de/svnroot/repos/grouter/trunk</developerConnection>
        <url>http://sasa/cgi-bin/viewcvs.cgi/</url>
    </scm>

    <!--
    | In this element section we specify which reporting plugins 
    | we want to use and which reports should be generated.
    | Reports are generated using
    |     mvn site
    -->
    <reporting>
        <plugins>
            <!--
            |  This report is generated from POM meta data.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependencies</report>
                            <report>project-team</report>
                            <report>mailing-list</report>
                            <report>cim</report>
                            <report>issue-tracking</report>
                            <report>license</report>
                            <report>scm</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <!--
            | This report produces test coverage metrics - you will need
            | a license for Clover to use it.
            -->

            <plugin>
                <artifactId>maven-clover-plugin</artifactId>
                <configuration>
                    <licenseFile>${clover.license.path}</licenseFile>
                    <flushPolicy>threaded</flushPolicy>
                    <flushInterval>5000</flushInterval>
                </configuration>
            </plugin>

            <!--plugin>
               <groupId>org.codehaus.mojo</groupId>
               <artifactId>cobertura-maven-plugin</artifactId>
           </plugin-->


            <!--
            | This report produces test coverage metrics - open source.
            -->

            <!--
            | Creates a report with line numbers in the java code.
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jxr-maven-plugin</artifactId>
            </plugin>

            <!--
           | Creates a report for the unit tests.
           -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>surefire-report-maven-plugin</artifactId>
            </plugin>

            <!--
           | Reports all todos.
           -->
            <!--plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>taglist-maven-plugin</artifactId>
                <configuration>
                    <tags>TODO, @todo, FIXME, @deprecated</tags>
                </configuration>
            </plugin-->


        </plugins>
    </reporting>


    <!--
    | Contains different elements for distributing artifacts or site
    | generated html to remote repositories or web sites.
   	-->
    <distributionManagement>
        <!--
        | The repostiory tag contain information needed for deploying
        | project generated artifacts to remote repository.
        | To deploy your artifacts to a server use:
        |    mvn deploy
        |
        | To make a release you can do
        |   mvn release:perform
        | This will make a release to local and remote repositories.
        | The release will include:
        |  1 - artifactid-version.jar
        |  2 -  artifactid-version-javadoc.jar
        |  3 - artifactid-version-source.jar
        |  4 - artifactid-version.pom
        -->
        <repository>
            <id>berlios</id>
            <name>Berlios Repository</name>
            <url>scp://grouter.berlios.org/dist</url>
        </repository>
        <!--
        | The site tag contain information needed for deploying
        | project generated html site to remote repository.
        | To be able to publish your html site use
        |     mvn site
        | followed by
        |     mvn site-deploy
        | The id element is a unique id stored in your settings.xml file
        | under element settings/servers/server which could look like
        | <server>
        |    <id>website</id>
        |     <username>repouser</username>
        |     <password>repopwd</password>
        | </server>
        | The url element specifies where to copy the artifact. Maven
        | currently only supports SSH, which in this case would copy
        | the site to host grouter.berlios.org in the path
        | /www/docs/project/
        -->
        <site>
            <id>website</id>
            <url>scp://grouter.berlios.org/www/docs/project/</url>
        </site>
    </distributionManagement>


    <!--
    | Used on report creation. Put in something meaningful - this is
    | your place in the sun ;-)
    -->
    <organization>
        <name>grouter</name>
        <url>http://developer.berlios.org/grouter</url>
    </organization>

    <!--
    | The build section is used to provide Maven with plugins and
    | configuration of those plugins. E.g. to change compiler
    | you will need to enter a plugin  maven-compiler-plugin
    | and vonfigure it to use source and target 1.5
    | You could also override the default project structure for
    | your project by entering source path directories etc.
    -->
    <build>
        <plugins>
            <plugin>
                <!--
                | The maven.surefire-plugin is the plugin used for
                | JUnit tests.
                -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!--
                    | Dangerous since we will skip testing if true!
                    | Another way would be to use
                    |  mvn -Dmaven.test.skip=true clean install
                    -->
                    <!-- skip>true</skip -->
                    <includes>
                        <include implementation="java.lang.String">**/*.java</include>
                        <include>${basedir}/src/config</include>
                    </includes>
                    <!-- 
                     | Skipping Test*$* since surefire believes the inner
                     | classes should be executed as test which failes the build.
                    -->
                    <excludes>
                        <exclude>**/ManualTest*.java</exclude>

                        <exclude>**/HttpTest*.java</exclude>
                        <exclude>**/Test*$*</exclude>
                        <exclude>**/*Test$*</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!--
            | Plugin dependencies. If you let out the version number
            | of the plugin you are using then Maven 2 will then check
            | on a daily basis for a new plugin and download and
            | install it on the fly. The update interval can be set to
            | always, daily, interval or never. Of course if you want
            | your builds to be reproducible then do specify a version
            | number
            -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <!-- version specify for reproducible builds -->
                <configuration>
                    <source>1.5</source>
                    <target>1.5</target>
                </configuration>
            </plugin>
            <!--
            | For any J2EE web based applications we need to generate
            | a war file with a web.xml etc. This plugin helps us
            | with that.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>none</mainClass>
                            <packageName>${package}</packageName>
                            <addExtensions/>
                        </manifest>
                        <manifestEntries>
                            <label>development</label>
                            <developer>${user.name}</developer>
                            <build-date>${build.time}</build-date>
                            <java-version>${java.version}</java-version>
                            <server>server</server>
                            <context-name>${artifactId}</context-name>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            <!--
            | The site plugin will produce a nice Maven looking
            | project site - with reports according to your
            | settings. It requires a project/src/site/site.xml file
            | in your projects.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <configuration>
                    <locales>en</locales>
                    <stagingDirectory>c:/temp</stagingDirectory>
                </configuration>
            </plugin>
            <!--
            | To enable more verbose output in the MANIFEST.MF class
            | of this jar we add som properties manually to the
            | maven-jar-plugin
            | Output in the MANIFEST.MF file will look like below:
            | Manifest-Version: 1.0
            | Archiver-Version: Plexus Archiver
            | Created-By: Apache Maven
            | Built-By: geopol
            | Package: org.grouter
            | Build-Jdk: 1.5.0_03
            | Extension-Name: common
            | Specification-Title:
            | Specification-Vendor: grouter
            | Implementation-Vendor: grouter
            | Implementation-Title: common
            | Implementation-Version: 1.0-SNAPSHOT
            | Main-Class: none
            | mode: development
            | url: http://maven.apache.org
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>none</mainClass>
                            <packageName>${package}</packageName>
                        </manifest>
                        <manifestEntries>
                            <mode>development</mode>
                            <url>${project.url}</url>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            <!--
		| Use to list goals of other plugins.
		| E.g to list the eclipse plugin goals
             	| mvn projecthelp:describe -Dplugin=org.apache.maven.plugins:maven-eclipse-plugin -Dfull=true
		-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-projecthelp-plugin</artifactId>
            </plugin>


            <!--
       | We are placing all dependencies in the root pom - the reason
       | is that we need all resources for the ant-run plugin classloader
       | to be present on first call. This is due to a Maven bug in versions
       | up to 2.0.2
       -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.grouter.platform.webservice</groupId>
                        <artifactId>ws-service</artifactId>
                        <version>1.0-SNAPSHOT</version>
                    </dependency>
                    <dependency>
                        <groupId>axis</groupId>
                        <artifactId>axis-jaxrpc</artifactId>
                        <version>1.3</version>
                    </dependency>
                    <dependency>
                        <groupId>axis</groupId>
                        <artifactId>axis-ant</artifactId>
                        <version>1.3</version>
                    </dependency>
                    <dependency>
                        <groupId>axis</groupId>
                        <artifactId>axis-saaj</artifactId>
                        <version>1.3</version>
                    </dependency>
                    <dependency>
                        <groupId>axis</groupId>
                        <artifactId>axis-wsdl4j</artifactId>
                        <version>1.5.1</version>
                    </dependency>
                    <dependency>
                        <groupId>axis</groupId>
                        <artifactId>axis</artifactId>
                        <version>1.3</version>
                        <exclusions>
                            <exclusion>
                                <groupId>javax.mail</groupId>
                                <artifactId>mail</artifactId>
                            </exclusion>
                            <exclusion>
                                <groupId>javax.activation</groupId>
                                <artifactId>activation</artifactId>
                            </exclusion>
                        </exclusions>
                    </dependency>
                    <dependency>
                        <groupId>ant</groupId>
                        <artifactId>ant-trax</artifactId>
                        <version>1.6.2</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>cobertura-maven-plugin</artifactId>
                    <configuration>
                        <instrumentation>
                            <!--ignore regex="com.common.util.statistics.*" /-->
                            <!--exclude>**/generated/**/*.class</exclude>
                                           <exclude>com/sonyericsson/admin/**/*.class</exclude-->
                            <!--  com....service.highscore /localizer / purchase needs to be moved into a generated declared package-->
                        </instrumentation>
                        <!--check branchrate="80" linerate="30" haltonerror="false"
                                           totalbranchrate="80" totallinerate="70">
                                          <regex pattern="com.sonyericsson.common.locale.*" branchrate="90" linerate="90"/>
                                        </check-->
                    </configuration>
                    <executions>
                        <execution>
                            <id>instrument</id>
                            <phase>test-compile</phase>
                            <goals>
                                <goal>instrument</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>report</id>
                            <phase>test</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                        </execution>
                    </executions>
                    <!--executions>
                                     <execution>
                                         <goals>
                                             <goal>clean</goal>
                                         </goals>
                                     </execution>
                                 </executions-->
                </plugin>
            </plugins>
        </pluginManagement>


    </build>
</project>
