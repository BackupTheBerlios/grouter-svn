package org.grouter.config;

import java.util.ArrayList;
import java.util.Iterator;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import org.apache.xmlbeans.*;
import org.apache.log4j.Logger;


/**
 * Validating XML against schema using features of the XMLBeans API.
 *
 * - Validating after changes by using the XmlObject.validate method.
 * This method is exposed by types generated by compiling schema. The
 * validate method validates instances against all aspects of schema.
 * Also, with this method you can specify a Collection instance to
 * capture errors that occur during validation.
 *
 */
public class ConfigHandler
{
    //ResourceBundle resourceBundle = ResourceBundle.getBundle("config");
    private static Logger logger = Logger.getLogger(ConfigHandler.class);
    private XmlOptions xmlOptions;
    private ArrayList validationErrors = new ArrayList();

    //root handle to config
    private GrouterConfigDocument grouterConfigDocument;

    /**
     * Constructor.
     * @param absoluteFilePath
     * @param xmlOptions
     */
    public ConfigHandler(String absoluteFilePath, XmlOptions xmlOptions)
    {
        if (absoluteFilePath==null)
        {
            throw new IllegalArgumentException("File path to config file can not be null!");
        }
        this.xmlOptions = xmlOptions;
        this.grouterConfigDocument =  (GrouterConfigDocument) parseXml(absoluteFilePath, xmlOptions);
    }

    /**
     * Constructor.
     * @param inputStream
     * @param xmlOptions
     */
    public ConfigHandler(InputStream inputStream, XmlOptions xmlOptions)
    {
        if (inputStream==null)
        {
            throw new IllegalArgumentException("InputStream can not be null!");
        }
        this.xmlOptions = xmlOptions;
        this.grouterConfigDocument =  (GrouterConfigDocument) parseXml(inputStream, xmlOptions);
    }

    /**
     * Illustrates use of the validate method by making changes to incoming
     * XML that invalidate the XML, then validating the instance and
     * printing resulting error messages.
     *
     * Because this code is designed to generate invalid XML, it
     * returns false when successful.
     *
     * @param xmlPath A path to the XML instance file.
     * @return <code>true if the XML is valid after changes;
     * otherwise, <code>false</code>.
     */
    public boolean isValidAfterChanges(String xmlPath)
    {
        return true;
        /*System.out.println("Validating after changes: \n");
        // Set up the validation error listener.

        validationOptions = new XmlOptions();
        validationOptions.setErrorListener(validationErrors);
        GRouterConfigDocument systemConfigDocument = (GRouterConfigDocument)parseXml(xmlPath, null);

        // During validation, errors are added to the ArrayList for
        // retrieval and printing by the printErrors method.
        boolean isValid = systemConfigDocument.validate(validationOptions);

        if (!isValid)
        {
            printErrors(validationErrors);
        }
        return isValid;
          */
    }

    /**
     * Receives the collection containing errors found during
     * validation and print the errors to the console.
     *
     * @param validationErrors The validation errors array which will be populated.
     */
    public void printErrors(ArrayList validationErrors)
    {
        Iterator iter = validationErrors.iterator();
        while (iter.hasNext())
        {
            logger.warn("Validation errors in xml : " + iter.next() + "\n");
        }
    }


    /**
     * <p>Creates a Xmlobject from the XML inputstream, then parses the stream's contents
     * into a type generated from schema.</p>
     *
     * @param inStream A stream to XML based on the schema in config.xsd.
     * @return An instance of a generated schema type that contains the parsed XML.
     */
    private XmlObject parseXml(InputStream inStream, XmlOptions validationOptions)
    {
        XmlObject xml = null;
        try
        {
            xml = XmlObject.Factory.parse(inStream, validationOptions);
        } catch (XmlException e)
        {
            logger.error(e , e);
        } catch (IOException e)
        {
            logger.error(e, e);
        }
        return xml;
    }

    /**
     * <p>Creates a File from the XML path , then parses the file's contents
     * into a type generated from schema.</p>
     *
     * @param xmlFilePath A path to XML based on the schema in config.xsd.
     * @return An instance of a generated schema type that contains the parsed XML.
     */
    private XmlObject parseXml(String xmlFilePath, XmlOptions validationOptions)
    {
        File xmlFile = new File(xmlFilePath);
        XmlObject xml = null;
        try
        {
            xml = XmlObject.Factory.parse(xmlFile, validationOptions);
        } catch (XmlException e)
        {
            logger.error(e, e);
        } catch (IOException e)
        {
            logger.error(e, e);
        }
        return xml;
    }

    /**
     * Get the config.
     * @return An GRouterConfigDocument from parsed config.xsd
     */
    public GrouterConfigDocument getGrouterConfigDocument()
    {
        return grouterConfigDocument;
    }


    
    public void printBootInfo()
    {
        logger.info(">> Name of grouter :" + getGrouterConfigDocument().getGrouterConfig().getName() );
        logger.info(">> Number of nodes : " + getGrouterConfigDocument().getGrouterConfig().getNodeArray().length );
    }
}
