<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <!--
    | This is the version for the POM model Maven 2 uses, it is something
    | you will probably never change (unless Maven decides to upgrade
    | the version number - but then you probably have to look through
    | the whole pom.xml file)
    -->
    <modelVersion>4.0.0</modelVersion>
    <!--
    | The groupId element is a unique identifier of the organization
    | or group that created the project. This value is used to group
    | all jars for a project into directories. E.g. in this example
    | GroupId will generate a folder structure of $MVNREPOS/org/grouter
    | on a mvn install. You will notice that many artifacts at ibiblio
    | do not use this type of structure (org.something)- instead they
    | place the groupId(folder) in the root structure. Maven encourages
    | you to use your reverse www address as a starting point for
    | this element, so a e.g. org.apache.jakarta.commons would be a
    | good candidate.
    -->
    <groupId>org.grouter</groupId>
    <!--
    | This is the name of the artifact which will be produced and put
    | under the groupId structure discussed above. It is a unique
    | identifier which identifies this artifact under the specified
    | groupId and will produce something like e.g.
    | grouter-1.0-SNAPSHOT.jar or on a release grouter-1.0.o.jar
    -->
    <artifactId>grouter</artifactId>
    <!--
    | The packaging element tells you what type of artifact will be
    | produced. There are several type of artifacts supported, like
    | war and ear type artifacts. The packaging element can also play a
    | part in customizing the build process.
    -->
    <packaging>pom</packaging>
    <!--
    | The version elelent is appended to the artifactId. During development
    | you should use a SNAPSHOT dependency. What it means is that
    | if you are working towards a 2.0 release then as a developer
    | you enter 2.0-SNAPSHOT
    -->
    <version>1.0-SNAPSHOT</version>
    <!--
    | Description will go to generated documentation reports.
    -->
    <description>GRouter is aimed to provide routing mechanism for messages
    with destinations including jms, ejb, file, email etc.</description>
    <!--
    | A name used for documentation.
    -->
    <name>grouter parent project</name>
    <!--
    | Url used for documentation.
    -->
    <url>http://grouter.berlios.de/</url>


    <!--
    | The developers element describe the committers to a project. Enter
    | all the project developers committing to the project.
    -->
    <developers>
        <developer>
            <id>gepo01</id>
            <name>Georges Polyzois</name>
            <email>gepo01 at yahoo dot not com</email>
            <url/>
            <organization/>
            <organizationUrl/>
            <roles/>
            <timezone/>
            <properties/>
        </developer>
    </developers>


    <!--
    | If you have any internal repository you will have to put them here.
    | This is great if e.g. you are working offline or you are producing
    | project specific plugins you want to distribute to developer in
    | the project transparently.
    -->
    <repositories>
        <repository>
            <id>maven2</id>
            <name>Danish Maven2 repository</name>
            <url>http://mirrors.sunsite.dk/maven2</url>
        </repository>
    </repositories>

    <!--
    | Put all global dependencies here instead of spreading them out in
    | different child modules - an oo way of handling dependencies.
    -->
    <dependencies>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.8</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.1</version>
        </dependency>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.7.0</version>
        </dependency>
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.1</version>
        </dependency>
    </dependencies>


    <!--
    | Put semi-global dependencies here, i.e. dependencies which
    | should be inherited by some of the child modules/projects of this
    | parent, but not all.
    -->
    <dependencyManagement>
        <dependencies>
            <!--
            | Dependencies to J2EE spec - using geronimo generated
            | artifacts to get transparent builds without installing
            | the J2EE kit or pointing to your J2EE app jars.
            -->
            <dependency>
                <groupId>geronimo-spec</groupId>
                <artifactId>geronimo-spec-jms</artifactId>
                <version>1.1-rc4</version>
            </dependency>
            <dependency>
                <groupId>geronimo-spec</groupId>
                <artifactId>geronimo-spec-ejb</artifactId>
                <version>2.1-rc4</version>
            </dependency>
            <dependency>
                <groupId>geronimo-spec</groupId>
                <artifactId>geronimo-spec-j2ee-connector</artifactId>
                <version>1.5-rc4</version>
            </dependency>
            <dependency>
                <groupId>geronimo-spec</groupId>
                <artifactId>geronimo-spec-activation</artifactId>
                <version>1.0.2-rc4</version>
            </dependency>
            <dependency>
                <groupId>geronimo-spec</groupId>
                <artifactId>geronimo-spec-jta</artifactId>
                <version>1.0.1B-rc4</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate</artifactId>
                <version>3.1rc2</version>
                <!--
                | Excluding jars is a powerful feature. Here I know I
                | will not use swarmcache, so I do not need downloading
                | that dependency.
                -->
                <exclusions>
                    <exclusion>
                        <groupId>ant</groupId>
                        <artifactId>ant</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>odmg</groupId>
                        <artifactId>odmg</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>c3p0</groupId>
                        <artifactId>c3p0</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>proxool</groupId>
                        <artifactId>proxool</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>opensymphony</groupId>
                        <artifactId>oscache</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>swarmcache</groupId>
                        <artifactId>swarmcache</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>jboss</groupId>
                        <artifactId>jboss-cache</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>javax.security</groupId>
                        <artifactId>jacc</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>javax.transaction</groupId>
                        <artifactId>jta</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring</artifactId>
                <version>1.2.6</version>
                <scope>compile</scope>
                <exclusions>
                    <exclusion>
                        <groupId>javax.activation</groupId>
                        <artifactId>jta</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>javax.resource</groupId>
                        <artifactId>connector</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <!--
    | Reporting is a powerful feature of Maven. In this section
    | we specify which reporting plugin we want to use and also
    | tell the report plugin explicilty which reports should
    | be generated.
    | Reports are generated using
    |     mvn site:site
    -->
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependencies</report>
                            <report>project-team</report>
                            <report>mailing-list</report>
                            <report>cim</report>
                            <report>issue-tracking</report>
                            <report>license</report>
                            <report>scm</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>


    <!--
    | Contains different elements for distributing artifacts or site
    | generated html to remote repositories or web sites.
   	-->
    <distributionManagement>
        <!--
        | The repostiory tag contain information needed for deploying
        | project generated artifacts to remote repository.
        | To deploy your artifacts to a server use:
        |    mvn deploy
        |
        | To make a release you can do
        |   mvn release:perform
        | This will make a release to local and remote repositories.
        | The release will include:
        |  1 - artifactid-version.jar
        |  2 -  artifactid-version-javadoc.jar
        |  3 - artifactid-version-source.jar
        |  4 - artifactid-version.pom
        -->
        <repository>
            <id>berlios</id>
            <name>Berlios Repository</name>
            <url>scp://grouter.berlios.org/dist</url>
        </repository>
        <!--
        | The site tag contain information needed for deploying
        | project generated html site to remote repository.
        | To be able to publish your html site use
        |     mvn site
        | followed by
        |     mvn site-deploy
        | The id element is a unique id stored in your settings.xml file
        | under element settings/servers/server which could look like
        | <server>
        |    <id>website</id>
        |     <username>repouser</username>
        |     <password>repopwd</password>
        | </server>
        | The url element specifies where to copy the artifact. Maven
        | currently only supports SSH, which in this case would copy
        | the site to host grouter.berlios.org in the path
        | /www/docs/project/
        -->
        <site>
            <id>website</id>
            <url>scp://grouter.berlios.org/www/docs/project/</url>
        </site>
    </distributionManagement>

    <!--
    | The scm element contain information of where to find a source
    | configuration management system where the project is resided.
    | The connection is used by Maven and the developerConnection
    | is used by developers to check out the svn trunk. The url
    | is provided to the browsable svn site.
    -->
    <scm>
        <connection>http://svn.berlios.de/svnroot/repos/grouter/trunk</connection>
        <developerConnection>https://developername@svn.berlios.de/svnroot/repos/grouter/trunk</developerConnection>
        <url>http://svn.berlios.de/wsvn/grouter</url>
    </scm>

    <!--
    | This is where we put all child modules to be built. In Maven 1
    | the reactor plugin was used and you pointed to a root directory from w
    | where is would start a traversal for project.xml file - this is
    | no longer the case. Instead we explicitly point to all child modules
    | which makes the build process a lot more faster.
    -->
    <modules>
        <module>modules/common</module>
        <module>modules/domain</module>
        <!--module>modules/router/grouter</module>
        <module>modules/router/grouterconfig</module -->
    </modules>


    <!--
    | Used on report creation. Put in something meaningful - this is
    | your place in the sun ;-)
    -->
    <organization>
        <name>grouter</name>
        <url>http://developer.berlios.org/grouter</url>
    </organization>

    <!--
    | The build section is used to provide Maven with plugins and
    | configuration of those plugins. E.g. to change compiler
    | you will need to enter a plugin  maven-compiler-plugin
    | and vonfigure it to use source and target 1.5
    | You could also override the default project structure for
    | your project by entering source path directories etc.
    -->
    <build>
        <plugins>
            <plugin>
                <!--
                | The maven.surefire-plugin is the plugin used for
                | JUnit tests.
                -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!--
                    | Dangerous since we will skip testing if true!
                    | Another way would be to use
                    |  mvn -Dmaven.test.skip=true install
                    -->
                    <skip>false</skip>
                    <includes>
                        <include implementation="java.lang.String">**/*.java</include>
                        <include>${basedir}/src/config</include>
                    </includes>
                    <!-- Manually exclude these tests... excludes>
                        <exclude implementation="java.lang.String">**/*Point*.java</exclude>
                    </excludes -->
                </configuration>
            </plugin>
            <!--
            | Plugin dependencies. If you let out the version number
            | of the plugin you are using then Maven 2 will then check
            | on a daily basis for a new plugin and download and
            | install it on the fly. The update interval can be set to
            | always, daily, interval or never. Of course if you want
            | your builds to be reproducible then do specify a version
            | number
            -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <!-- version specify for reproducible builds -->
                <configuration>
                    <source>1.5</source>
                    <target>1.5</target>
                </configuration>
            </plugin>
            <!--
            | For any J2EE web based applications we need to generate
            | a war file with a web.xml etc. This plugin helps us
            | with that.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <warSourceDirectory >src/webapp</warSourceDirectory >
                </configuration>
            </plugin>
            <!--
            | The site plugin will produce a nice Maven looking
            | project site - with reports according to your
            | settings. It requires a project/src/site/site.xml file
            | in your projects.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <configuration>
                    <locales>en</locales>
                </configuration>
            </plugin>
            <!--
            | To enbale more verbose output in the MANIFEST.MF class
            | of this jar we add som properties amnually to the
            | maven-ja-plugin
            | Output in the MANIFEST.MF file will look like below:
            | Manifest-Version: 1.0
            | Archiver-Version: Plexus Archiver
            | Created-By: Apache Maven
            | Built-By: geopol
            | Package: org.grouter
            | Build-Jdk: 1.5.0_03
            | Extension-Name: common
            | Specification-Title:
            | Specification-Vendor: grouter
            | Implementation-Vendor: grouter
            | Implementation-Title: common
            | Implementation-Version: 1.0-SNAPSHOT
            | Main-Class: none
            | mode: development
            | url: http://maven.apache.org
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>none</mainClass>
                            <packageName>org.grouter</packageName>
                        </manifest>
                        <manifestEntries>
                            <mode>development</mode>
                            <url>${pom.url}</url>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
